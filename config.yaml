esphome:
  name: domocare-esp
  platform: ESP32
  board: esp32dev

# Secrets pour Wi-Fi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Fallback hotspot en cas d'échec Wi-Fi
  ap:
    ssid: !secret fallback_ssid
    password: !secret fallback_password

captive_portal:

# Logger et API pour communication
logger:
api:
ota:
  platform: esphome  # Ajout du platform pour OTA

# Capteur HC-SR04
sensor:
  - platform: ultrasonic
    trigger_pin: GPIO12  # Trigger connecté à GPIO12
    echo_pin: GPIO14     # Echo connecté à GPIO14
    name: "Distance Ultrasonique"
    update_interval: 1s

output:
  - platform: ledc
    pin: GPIO27
    id: "buzzer"


rtttl:
  output: "buzzer"
  id: my_rtttl
  gain: 60%

switch:
  - platform: template
    name: test
    turn_on_action:
      then:
        - rtttl.play: 'Thunders:d=4,o=5,b=180:8b5'
  - platform: template
    name: acdc
    turn_on_action:
      then:
        - rtttl.play: 'Thunders:d=4,o=5,b=180:8b5,8d#6,8b5,8f#6,8b5,8d#6,8b5,8f#6,8b5,8d#6,8b5,8f#6,8b5,8f#6,8b5,8f#6,8e6,8b5,8a6,8b5,8e6,8b5,8a6,8b5,8e6,8b5,8a6,8b5,8e6,8b5,8a6'
  - platform: template
    name: god
    turn_on_action:
      then:
        - rtttl.play: 'Godfather:d=8,o=7,b=80:e5,a5,c6,b5,a5,c6,a5,b5,a5,f5,g5,2e5,e5,e5,a5,c6,b5,a5,c6,a5,b5,a5,e5,e5,2d5,d5,d5,f5,g#5,2b5,b5,d5,f5,g#5,2a5,a5,c5'

  - platform: template
    name: hey
    turn_on_action:
      then:
        - rtttl.play: ' Never Go:d=4,o=6,b=125:g#5, a#5, c#5, a#5, 8f.5, 8f.5, d#.5, g#5, a#5, c#5, a#5, 8d#.5, 8d#.5, 8c#.5, c5, 8a#5, g#5, a#5, c#5, a#5, c#5, 8d#5, 8c.5, a#5, g#5, 8g#5, 8d#5, 8c#5, 2c#5, g#5, a#5, c#5, a#5, f5, 8f5, d#.5, g#5, a#5, c#5, a#5, g#5, 8c#5, 8c#.5, c5, 8a#5, g#5, a#5, c#5, a#5, c#5, 8d#5, 8c.5, a#5, g#5, 8g#5, d#5, c#5'

  - platform: template
    name: starwars
    turn_on_action:
      then:
        - rtttl.play: 'StarwarsI:d=16,o=5,b=100:4e,4e,4e,8c,p,g,4e,8c,p,g,4e,4p,4b,4b,4b,8c6,p,g,4d#,8c,p,g, 4e,8p'
  - platform: template
    name: stopRTTTL
    turn_on_action:
      then:
        - rtttl.play: 'One:d=4,o=5,b=112:8f#6,16f#6,16f#6,8f#6,8f#6,g6,8f#6,2f#6,8p,8f#6,16f#6,16f#6,8f#6,8f#6,g6,8f#6,8d6,2d6,8f#6,16f#6,16f#6,8f#6,8d6,e6,8f#6,16f#6,16g6,f#.6,8a6,8b6,16b6,16b6,8b6,8a6,8g6,8f#6,2f#6,8f#6,16f#6,16f#6,8f#6,8f#6,g6,8f#6,2f#6,8p,8f#6,16f#6,16f#6,8f#6,8f#6,g6,8f#6,8d6,2d6,8f#6,8f#6,8f#6,8d6,e6,8f#6,2f#6,8p,8b6,16b6,16b6,8b6,8a6,8g6,8f#6,f#6,g.6,8a6,8b6,8a6,g6,f#6,8g6,2a.6,8a6,d7,c#7,d7,2d.7'
  - platform: template
    name: met
    turn_on_action:
      then:
        - rtttl.stop

# Keypad Matriciel 4x4 avec collecte de code PIN
matrix_keypad:
  id: "matrixkeypad"
  rows:
    - pin: GPIO18
    - pin: GPIO5
    - pin: GPIO17
    - pin: GPIO16
  columns:
    - pin: GPIO4
    - pin: GPIO0
    - pin: GPIO2
    - pin: GPIO15
  keys: "123A456B789C*0#D"
  has_diodes: false

text_sensor:
  - platform: template
    name: Keypad
    id: keypad

key_collector:
  - id: pincode_reader
    source_id: matrixkeypad
    min_length: 4
    max_length: 4
    end_keys: "#"
    end_key_required: true
    back_keys: "*"
    clear_keys: "C"
    allowed_keys: "0123456789"
    timeout: 5s
    on_progress:
      - logger.log:
          format: "Input progress: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]
    on_result:
      - logger.log:
          format: "Input result: '%s', started by '%c', ended by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)", "(end == 0 ? '~' : end)" ]
      - text_sensor.template.publish:
          id: keypad
          state: !lambda "return x.c_str();"
      - delay: 5s
      - text_sensor.template.publish:
          id: keypad
          state: "0000"
    on_timeout:
      - logger.log:
          format: "Input timeout: '%s', started by '%c'"
          args: [ 'x.c_str()', "(start == 0 ? '~' : start)" ]